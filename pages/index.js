import Head from 'next/head';
import Image from 'next/image';
import styles from '../styles/Home.module.css';
import Banner from '../components/Banner';
import ProductCard from '../components/ProductCard';
import coffeeStoresData from '../data/coffee-stores.json';
import { fetchCoffeeStoresData } from '../lib/services/coffeeStores';
import { useTrackingLocation } from '../lib/hooks/useTrackingLocation';
import { useEffect, useState } from 'react';

export async function getStaticProps() {
  const coffeeStores = await fetchCoffeeStoresData();

  return {
    props: {
      coffeeStores,
    },
  };
}

export default function Home(props) {
  const { locationErrorMsg, latLong, handleTrackLocation, isFindingLocation } =
    useTrackingLocation();
  const handleOnClickBtnBanner = () => handleTrackLocation();

  const [coffeeStoresNearMe, setCoffeeStoresNearMe] = useState([]);
  const [errorCoffeeStoresNearMe, setErrorCoffeeStoresNearMe] = useState(null);

  useEffect(() => {
    const setCoffeeStoresByLocation = async () => {
      if (!!latLong && !!latLong.latitudeData && !!latLong.longitudeData) {
        try {
          const latLongModifier = `${latLong?.latitudeData},${latLong?.longitudeData}`;
          const fetchedCoffeeStores = await fetchCoffeeStoresData(
            latLongModifier,
            10
          );
          // console.log('fetchedCoffeeStores from button: ', fetchedCoffeeStores);
          setCoffeeStoresNearMe(fetchedCoffeeStores);
        } catch (error) {
          // console.log('error: ', error);
          setErrorCoffeeStoresNearMe(error.message);
        }
      }
    };

    setCoffeeStoresByLocation();
  }, [latLong, latLong?.latitudeData, latLong?.longitudeData]);

  return (
    <div className={styles.container}>
      <Head>
        <title>Home Page</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <Banner
          buttonText={isFindingLocation ? 'Locating...' : 'View stores nearby'}
          handleOnClick={handleOnClickBtnBanner}
        />
        <div className={styles.heroImage}>
          <Image
            src="/static/hero-image.png"
            alt="hero-img"
            width={500}
            height={300}
          />
        </div>
        {locationErrorMsg && (
          <p className={styles.errorMsg}>
            Something went wrong: {locationErrorMsg}
          </p>
        )}
        {errorCoffeeStoresNearMe && (
          <p className={styles.errorMsg}>
            Something went wrong: {errorCoffeeStoresNearMe}
          </p>
        )}
        {/* THIS IS FOR COFFEE STORES IN NEAR ME = DYNAMIC CSR */}
        <div className={styles.productSection}>
          {!!coffeeStoresNearMe.length && coffeeStoresNearMe.length > 0 && (
            <>
              <h2 className={styles.heading}>Coffee Stores Near Me</h2>
              <div className={styles.productCardSection}>
                {(coffeeStoresNearMe || []).map((coffeeStore, idx) => {
                  return (
                    <ProductCard
                      key={`coffee-store-${idx}`}
                      productTitle={coffeeStore.name || ''}
                      imgUrl={
                        coffeeStore?.imgUrl ||
                        'https://images.unsplash.com/photo-1498804103079-a6351b050096?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=2468&q=80'
                      }
                      href={`/coffee-stores/${coffeeStore.fsq_id}`}
                    />
                  );
                })}
              </div>
            </>
          )}
        </div>
        {/* THIS IS FOR COFFEE STORES IN JAKARTA = STATIC */}
        <div className={styles.productSection}>
          {!!props.coffeeStores.length && !!props.coffeeStores.length > 0 && (
            <>
              <h2 className={styles.heading}>Jakarta Coffee Stores</h2>
              <div className={styles.productCardSection}>
                {(props.coffeeStores || []).map((coffeeStore, idx) => {
                  return (
                    <ProductCard
                      key={`coffee-store-${idx}`}
                      productTitle={coffeeStore.name || ''}
                      imgUrl={
                        coffeeStore?.imgUrl ||
                        'https://images.unsplash.com/photo-1498804103079-a6351b050096?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=2468&q=80'
                      }
                      href={`/coffee-stores/${coffeeStore.fsq_id}`}
                    />
                  );
                })}
              </div>
            </>
          )}
        </div>
      </main>
    </div>
  );
}
